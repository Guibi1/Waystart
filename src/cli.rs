use xflags::xflags;

xflags! {
    src "src/cli.rs"

    /// A start menu for Wayland-based window managers.
    cmd waystart {
        default cmd standalone {}

        /// Start the Waystart daemon.
        cmd daemon {
            /// Ask the daemon to exit gracefully.
            optional -e, --exit
        }

        /// Open the Waystart window.
        cmd open {}

        /// Close the Waystart window.
        cmd close {}

        /// Open/close the Waystart window.
        cmd toggle {}
    }
}

// generated start
// The following code is generated by `xflags` macro.
// Run `env UPDATE_XFLAGS=1 cargo build` to regenerate.
#[derive(Debug)]
pub struct Waystart {
    pub subcommand: WaystartCmd,
}

#[derive(Debug)]
pub enum WaystartCmd {
    Standalone(Standalone),
    Daemon(Daemon),
    Open(Open),
    Close(Close),
    Toggle(Toggle),
}

#[derive(Debug)]
pub struct Standalone;

#[derive(Debug)]
pub struct Daemon {
    pub exit: bool,
}

#[derive(Debug)]
pub struct Open;

#[derive(Debug)]
pub struct Close;

#[derive(Debug)]
pub struct Toggle;

impl Waystart {
    #[allow(dead_code)]
    pub fn from_env_or_exit() -> Self {
        Self::from_env_or_exit_()
    }

    #[allow(dead_code)]
    pub fn from_env() -> xflags::Result<Self> {
        Self::from_env_()
    }

    #[allow(dead_code)]
    pub fn from_vec(args: Vec<std::ffi::OsString>) -> xflags::Result<Self> {
        Self::from_vec_(args)
    }
}
// generated end
